{"version":3,"sources":["containers/Song.js","containers/Play.js","containers/Pause.js","containers/Bar.js","containers/Audio.js","containers/useAudioPlayer.js","containers/App.js","serviceWorker.js","index.js"],"names":["Song","props","songName","songArtist","className","Play","handleClick","onClick","PlayCircleOutline","PauseCircleFilled","Bar","duration","curTime","onTimeUpdate","curPercentage","formatDuration","moment","format","trim","calcClickedTime","e","clickPositionInPage","pageX","bar","document","querySelector","barStart","getBoundingClientRect","left","window","scrollX","barWidth","offsetWidth","style","background","onMouseDown","updateTimeOnMove","eMove","addEventListener","removeEventListener","handleTimeDrag","Audio","useState","setDuration","setCurTime","playing","setPlaying","clickedTime","setClickedTime","useEffect","audio","getElementById","setAudioData","currentTime","setAudioTime","play","pause","useAudioPlayer","id","src","time","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df94b136.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Song(props) {\r\n  const { songName, songArtist } = props;\r\n  \r\n  return (\r\n    <div className=\"song\">\r\n      <h1 className=\"song__title\">{songName}</h1>\r\n      {/* <h2 className=\"song__artist\">{songArtist}</h2> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Song;","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { PlayCircleOutline } from \"@material-ui/icons\";\r\n\r\nexport default function Play(props) {\r\n  const { handleClick } = props;\r\n  return (\r\n    <button className=\"player__button\" onClick={() => handleClick()}>\r\n      <h2 className=\"song__artist_first\">Clase 1</h2>\r\n      <h2 className=\"song__artist_second\">\r\n        Medidas de dispersión,posición y de forma \r\n      </h2>\r\n      <h2 className=\"song__artist\">Conceptos Básicos iniciales 1</h2>\r\n      <h2 className=\"song__artist\">03m 21s</h2>\r\n      {/* <h2>{formatDuration(duration)}</h2> */}\r\n      <div className=\"song___audio\">\r\n        <PlayCircleOutline />\r\n        <h2>Reproducir Audio</h2>\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { PauseCircleFilled } from \"@material-ui/icons\";\r\n\r\nexport default function Play(props) {\r\n  const { handleClick } = props;\r\n  \r\n  return (\r\n    <button className=\"player__button\" onClick={() => handleClick()}>\r\n      <PauseCircleFilled />\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport momentDurationFormatSetup from \"moment-duration-format\";\r\n\r\nexport default function Bar(props) {\r\n  const { duration, curTime, onTimeUpdate } = props;\r\n\r\n  const curPercentage = (curTime / duration) * 100;\r\n\r\n  function formatDuration(duration) {\r\n    return moment\r\n      .duration(duration, \"seconds\")\r\n      .format(\"mm:ss\", { trim: false });\r\n  }\r\n\r\n  function calcClickedTime(e) {\r\n    const clickPositionInPage = e.pageX;\r\n    const bar = document.querySelector(\".bar__progress\");\r\n    const barStart = bar.getBoundingClientRect().left + window.scrollX;\r\n    const barWidth = bar.offsetWidth;\r\n    const clickPositionInBar = clickPositionInPage - barStart;\r\n    const timePerPixel = duration / barWidth;\r\n    return timePerPixel * clickPositionInBar;\r\n  }\r\n\r\n  function handleTimeDrag(e) {\r\n    onTimeUpdate(calcClickedTime(e));\r\n\r\n    const updateTimeOnMove = eMove => {\r\n      onTimeUpdate(calcClickedTime(eMove));\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", updateTimeOnMove);\r\n\r\n    document.addEventListener(\"mouseup\", () => {\r\n      document.removeEventListener(\"mousemove\", updateTimeOnMove);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"bar\">\r\n      <span className=\"bar__time\">{formatDuration(curTime)}</span>\r\n      <div\r\n        className=\"bar__progress\"\r\n        style={{\r\n          background: `linear-gradient(to right, orange ${curPercentage}%, white 0)`\r\n        }}\r\n        onMouseDown={e => handleTimeDrag(e)}\r\n      >\r\n        <span\r\n          className=\"bar__progress__knob\"\r\n          style={{ left: `${curPercentage - 2}%` }}\r\n        />\r\n      </div>\r\n      <span className=\"bar__time\">{formatDuration(duration)}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Song from \"./Song\";\r\nimport Play from \"./Play\";\r\nimport Pause from \"./Pause\";\r\nimport Bar from \"./Bar\";\r\n\r\nimport useAudioPlayer from \"./useAudioPlayer\";\r\n\r\nfunction Audio() {\r\n  const {\r\n    curTime,\r\n    duration,\r\n    playing,\r\n    setPlaying,\r\n    setClickedTime\r\n  } = useAudioPlayer();\r\n\r\n  return (\r\n    <div className=\"player\">\r\n        <audio id=\"audio\">\r\n          <source src=\"https://docs.google.com/uc?export=download&id=1YfyZlDmbrnNvYL62eEs4pGHX2rsLBVW1\" />\r\n          {/* <source src=\"./tusa.mp3\" /> */}\r\n          Your browser does not support the <code>audio</code> element.\r\n        </audio>\r\n        <Song songName=\"UGO 2.0\" songArtist=\"TUSA Karol G\" />\r\n        <div className=\"controls\">\r\n          {playing ? (\r\n            <Pause handleClick={() => setPlaying(false)} />\r\n          ) : (\r\n            <Play  handleClick={() => setPlaying(true)} />\r\n          )}\r\n          <Bar\r\n            curTime={curTime}\r\n            duration={duration}\r\n            onTimeUpdate={time => setClickedTime(time)}\r\n          />\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Audio;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useAudioPlayer() {\r\n  const [duration, setDuration] = useState();\r\n  const [curTime, setCurTime] = useState();\r\n  const [playing, setPlaying] = useState(false);\r\n  const [clickedTime, setClickedTime] = useState();\r\n\r\n  useEffect(() => {\r\n    const audio = document.getElementById(\"audio\");\r\n    const setAudioData = () => {\r\n      setDuration(audio.duration);\r\n      setCurTime(audio.currentTime);\r\n    };\r\n    const setAudioTime = () => setCurTime(audio.currentTime);\r\n    audio.addEventListener(\"loadeddata\", setAudioData);\r\n\r\n    audio.addEventListener(\"timeupdate\", setAudioTime);\r\n    // React state listeners: update DOM on React state changes\r\n    playing ? audio.play() : audio.pause();\r\n\r\n    if (clickedTime && clickedTime !== curTime) {\r\n      audio.currentTime = clickedTime;\r\n      setClickedTime(null);\r\n    }\r\n    return () => {\r\n      audio.removeEventListener(\"loadeddata\", setAudioData);\r\n      audio.removeEventListener(\"timeupdate\", setAudioTime);\r\n    };\r\n  });\r\n  return {\r\n    curTime,\r\n    duration,\r\n    playing,\r\n    setPlaying,\r\n    setClickedTime\r\n  };\r\n}\r\n","import React from 'react';\nimport Audio from './Audio'\nimport '../styles.scss';\nconst App = () => (\n  <div className=\"App\">\n    <Audio/>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}